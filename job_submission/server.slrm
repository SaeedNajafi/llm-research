#!/bin/bash

#SBATCH --job-name=vllm-inference
#SBATCH --ntasks-per-node=1
#SBATCH --open-mode=append
#SBATCH --wait-all-nodes=1
#SBATCH --output=%x_%j.out
#SBATCH --error=%x_%j.err

LOG_DIR=$1

# enable conda env properly.
source ${CURR_DIR}/job_submission/env_up.sh

date;pwd

nvidia-smi

# Getting the node names
nodes=$(scontrol show hostnames "$SLURM_JOB_NODELIST")
nodes_array=($nodes)

head_node=${nodes_array[0]}
head_node_ip=$(srun --nodes=1 --ntasks=1 -w "$head_node" hostname --ip-address)

# Find port for head node and vllm.
head_node_port="$(python -c 'import socket; s=socket.socket(); s.bind(("", 0)); print(s.getsockname()[1])')"
vllm_port_number="$(python -c 'import socket; s=socket.socket(); s.bind(("", 0)); print(s.getsockname()[1])')"

# Starting the Ray head node
ip_head=$head_node_ip:$head_node_port
export ip_head
echo "IP Head: $ip_head"

echo "Starting HEAD at $head_node"

TOTAL_CPUS_PER_NODE=$((CPUS_PER_GPU*GPUS_PER_NODE))

export VLLM_ATTENTION_BACKEND="FLASHINFER"

srun --nodes=1 --ntasks=1 -w "$head_node" \
    ray start --head --node-ip-address="$head_node_ip" --port=$head_node_port \
    --num-cpus "${TOTAL_CPUS_PER_NODE}" --num-gpus "${GPUS_PER_NODE}" --block &

# Starting the Ray worker nodes
# Optional, though may be useful in certain versions of Ray < 1.0.
sleep 10

# number of nodes other than the head node
worker_num=$((SLURM_JOB_NUM_NODES - 1))

for ((i = 1; i <= worker_num; i++)); do
    node_i=${nodes_array[$i]}
    echo "Starting WORKER $i at $node_i"
    srun --nodes=1 --ntasks=1 -w "$node_i" \
        ray start --address "$ip_head" \
            --num-cpus "${TOTAL_CPUS_PER_NODE}" --num-gpus "${GPUS_PER_NODE}" --block &

    sleep 5
done

echo "Server address: http://${head_node_ip}:${vllm_port_number}/v1"

LOG_PATH="${LOG_DIR}/log_${SLURM_JOB_ID}_rank_${SLURM_PROCID}.log"
# Make logging directories.
mkdir -p "${LOG_DIR}"
echo "Placing logs in: ${LOG_DIR}"

python3 -m vllm.entrypoints.openai.api_server \
    --model ${VLLM_MODEL_WEIGHTS} \
    --host "0.0.0.0" \
    --port ${vllm_port_number} \
    --tensor-parallel-size $((SLURM_JOB_NUM_NODES*GPUS_PER_NODE)) \
    --trust-remote-code \
    --max-logprobs ${VLLM_MAX_LOGPROBS} \
    --distributed-executor-backend ray \
    --engine-use-ray \
    --worker-use-ray \
    --max_num_seqs 8 >> ${LOG_PATH} 2>&1
